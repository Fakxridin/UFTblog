<% const userHasLiked = user && blog.likedBy.includes(user._id); %>
<%- include("./partials/head.ejs") %>

<body>
  <%- include("./partials/nav.ejs") %>

  <div class="details content">
    <h2><%= blog.title %></h2>
    
    
    <!-- Delete blog button -->
    <button class="delete" data-doc="<%= blog._id %>" aria-label="Delete Blog">
      <img src="/trashcan.svg" alt="Delete Blog">
    </button>

    

    <div class="content">
      <p><%= blog.body %></p>
    </div>
    <div class="likes-section">
      <button class="like-toggle-button" data-id="<%= blog._id %>">
        <i class="fas fa-heart <%= userHasLiked ? 'liked' : '' %>"></i>
      </button>
      
      <p><strong class="like-count"><%= blog.likes %></strong> Likes</p>
      <p>Liked by:
        <% blog.likedBy.forEach(userId => { 
             const user = users.find(u => u._id.toString() === userId.toString()); // Ensure proper comparison
             if (user) { // Ensure user exists
        %>
          <span><%= user.username %></span>
        <% 
             }
        }); %>
      </p>
    </div>
     
    <p class="created-at"><%= new Date(blog.createdAt).toLocaleDateString() %></p>
  </div>
  
  <%- include("./partials/footer.ejs") %>
<div class="error-message" style="color: red; display: none;"></div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Handle delete action
    const trashcan = document.querySelector('button.delete');
    if (trashcan) {
      trashcan.addEventListener('click', (e) => {
        if (confirm('Are you sure you want to delete this blog?')) {
          const endpoint = `/blogs/${trashcan.dataset.doc}`;
          fetch(endpoint, { method: 'DELETE' })
            .then(response => response.json())
            .then(data => {
              window.location.href = data.redirect; // Redirect after deletion
            })
            .catch(err => console.error('Error deleting blog:', err));
        }
      });
    }

    // Handle like/unlike action
    document.querySelectorAll('.like-toggle-button').forEach(button => {
      button.addEventListener('click', function () {
        const heartIcon = this.querySelector('i');
        const likeCountElem = this.closest('.likes-section').querySelector('.like-count');
        const blogId = this.getAttribute('data-id');

        // Toggle the 'liked' class
        heartIcon.classList.toggle('liked');

        // Determine if the post is being liked or unliked
        const isLiked = heartIcon.classList.contains('liked');
        let likeCount = parseInt(likeCountElem.textContent, 10);
        likeCount = isLiked ? likeCount + 1 : likeCount - 1;
        likeCountElem.textContent = likeCount;

        // Make an AJAX request to update the like status on the server
        fetch(`/like/${blogId}`, {
          method: 'POST',  // or 'DELETE' for unliking
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken  // Include CSRF token if required
          },
          body: JSON.stringify({ liked: isLiked })
        })
        .then(response => response.json())
        .then(data => {
          console.log(data.message); // Handle success
        })
        .catch(error => {
          console.error('Error:', error);
          // Revert the like count and icon color in case of error
          heartIcon.classList.toggle('liked');
          likeCount = isLiked ? likeCount - 1 : likeCount + 1;
          likeCountElem.textContent = likeCount;
        });
      });
    });
  });
</script>
</body>
</html>